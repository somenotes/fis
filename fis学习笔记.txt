fis学习笔记
	为什么要用fis
		因为前端
		1.从开发者的角度来说,静态资源（脚本、样式）的编写、引入、资源调试、后台联调、资源部署、资源性能优化在无工具的帮助下，整个过程会非常麻烦，开发效率和开发体验非常差，产出物的质量也将无法保证。
		2.从项目管理的角度来说，站点、子系统、甚至一个页面上的引入的资源越来越多，管理、迭代、部署都变得非常麻烦，开发、扩展都变得低效，项目成本增高。项目将陷入一个成本越来越高，局面越来越混乱的局面；
		3.从团队的角度来说，如果没有一个统一的工具、统一的规范、统一的标准来去做这些东西，那么每个人的想法做法都会不一致，因而整个项目很难做到风格的统一，团队将陷入工作越来越麻烦，人员越来越低效的局面。
		这时，你就需要有一个构建工具，诸如grunt，gulp，fis等
	fis可以做什么
		1、帮助开发者省却了资源引入、资源压缩、资源整合、资源依赖管理、资源定位的麻烦，不仅可以帮助开发者自动去做这些事情，甚至连配置这些自动化工作的都省去了，达到了零配置或者最小配置的水平。而这些东西用gulp、grunt去做，插件的下载、流程和逻辑的配置依然很繁琐。fis让开发者可以专注于业务逻辑开发，这些无聊的事情就交给工具去做吧。（资源的引入，资源的依赖管理，资源的压缩，资源的整合，资源的修改从人工维护的阶段发展到了自动化阶段）
		2.搭建本地服务器环境，方便调试，自动监控文件变动，方便开发
		3.引入前端模块化，不同于seajs、requirejs、browserify的脚本模块化方式，它通过资源定位、内容嵌入、依赖管理这三个语言能力，可以带来脚本、样式、模板的组件化，通过预编译的方式做到模块化。
		4.统一团队风格，为项目带来了可维护性、代码质量带来了保证，降低了人工维护的成本和风险，提高了团队效率
	fis不可以做什么
		fis可以帮我们做编码以外的事情，诸如模块化静态资源，静态资源自动加载，静态资源自动部署，静态资源自动性能优化，唯独不能代替我们编码，编码要理解以下知识，amd，cmd，umd，commanjs规范，组件化，模块化的知识，js高性能编码知识，js、css的跨平台，js的性能优化知识，前端资源的优化，异步编程，设计模式，框架的使用。计算机理论基础知识
	fis看得见的好处
		资源的人工维护升级到自动维护（资源的模块化，资源的引入，资源的依赖，资源的部署，资源的优化）（资源指脚本、样式、图片、模板、数据而不仅仅限于脚本）
		所见即所得的开发体验：文件监控，自动编译和刷新浏览器
		资源的组件化开发
	怎么搞fis
		fis的使用
			1.搞懂fis的目录规范和编码规范和开发规范，在规范以内编码，通过fis预编译，产出真正的html、css、js文件
			2.编码过程中，通过fis的文件监控、本地环境的搭建，来做到保存即编译、保存即刷新，所见即所得的工作流程。
			3.充分利用fis强大的组件化机制，模块化组件化开发
			4.利用fis自动部署代码
			5.自动做性能优化。
		fis的进阶
			自定义目录规范，编译规范，部署规范，完美融合于项目
			fis的资源定位，内容嵌入，依赖管理三种语言能力
		fis的安装
			1.fis是node下的npm包，自然依赖于node和npm环境。同时，如果和后端结合，还依赖于后台语言的开发环境，装fis，先搞定环境。
			2.npm install -g fis or fis插件
			3.fis的三个命令以及n个参数的使用满足开发的需求
