为什么要用fis。
怎么搞fis
先从安装开始


举一个例子，先从如何删掉一个功能说起。。。
首先要找到这块html代码，不好找。
再删css，再删js,这样会陷入一个两难的境地，不删吧，有冗余，删掉吧，可能其他地方会有依赖。这就是手工维护的坏处，即浪费时间，又容易出错，还要承担各种未知的风险。那么怎么才能自动管理这些资源呢，包括html资源，css资源，js资源，图片资源，又不用考虑依赖的问题。fis带给我们的目录规范和开发框架，fis不仅仅是一个自动化工具，做些性能优化的事情，也不是一个辅助工具，为我们提供一些本地服务器的便利。它还是一个开发框架，为我们提供了模块化开发以及与模块化相关的目录规范。fis可以
再找到相关的js，即使做了模块化，和其他代码隔离了，依然不好找，因为不就近依赖。写js有一个比较好的习惯是，一个文件，只包含一个模块，一个模块，只干一件事情。vote模块只干了投票这件事情。我们再看看这个模块是在index文件里调用的，我们把这段代码注释掉就okay了。


如何增加一个功能？
一个页面的制作，是先从静态的html，css，js效果开始的，建议在emao上制作完静态页面，然后再添加到emaop里做模块化。

fis=模块化开发框架+模块化开发规范+自动化工具+辅助工具
从另一个角度来讲，它是编译工具和静态资源管理工具。
它的编译功能是通过参数+配置+文件来完成的。

fis自动化和辅助功能，在很多方面做到了零配置，零规范，也就是说，对页面目录没有任何要求，也不需要手动配置，即可实现下面这几个功能，
搭建服务器本地预览页面
自动编译，自动刷新
自动性能优化。
同时也为我们的开发提供了开发框架和开发规范。
如果仅仅是静态页面制作，提供一个本地预览的功能，自动编译+自动刷新功能，简单的性能优化功能比如压缩打包雪碧图等，相对地址自动修改为绝对地址。。。而这几个功能是不需要配置的。
同时，也为我们的主站点带来了组件化，更好的管理我们站点的静态资源。

如果做交互，就要用到ajax，这时前端需要一个本地预览+url模拟+数据模拟。。。。。。

fis如果仅仅当做工具来用，它是非常便利的，零配置，零规范，并且内置了很多插件，只要装了fis，我们的任何项目就可以实现各种功能。
同时也是解决方案，为我们提供了开发框架和开发规范。
后端组件化，前端静态资源管理，fis-plus是一个后端的方案，fis-pure是一个前端的方案


线上调试？线上出错了我们首先需要知道哪个文件报错了。。。但是资源打包了。。。输入？fis_debug即可查看

fis配置了解下。。。。