fis解决了那些问题？
从架构的角度而非经验的角度来解决前端问题。这就是前端工程。

从经验的角度来解决问题，可能解决了一时一地的问题，但是长久来看，以及从全局来看，会带来更加难以管理和性能恶化的结果。
在前端开发的所有环节，有很多可节省的人力成本和时间，非常可观。

fis节省了成本，保证了质量。


缓存问题+按需加载问题
资源的分发?独立资源的版本更新和缓存
、、批量修订文件名，解决了缓存和时间间隙的问题。。。
、、https://app.yinxiang.com/shard/s34/nl/8057501/60a47375-cb4f-4397-9d6c-bbdacab2e525/?csrfBusterToken=U%3D7af29d%3AP%3D%2F%3AE%3D14f5ec1227f%3AS%3Dab9249a323669c4c826ea984bd35cd7b
资源的冗余和重复?
工程上维护的不同步导致了资源的冗余？
如何解决：资源的就近依赖和按需加载，去重。
、、https://app.yinxiang.com/shard/s34/nl/8057501/ffd9e887-150f-48de-9ee1-4f98215e9002/?csrfBusterToken=U%3D7af29d%3AP%3D%2F%3AE%3D14f5ec1d8f2%3AS%3Dbc99b5699939452f322e66f03256229a

按需加载=就近依赖，同时css放头部，js放尾部这三条原则。

资源的重复加载？
两个页面，都打包了一个打了ab，一个打了ac，那么a资源实际上是重复了加载了。没有有效利用缓存。




、、、、、、、、
能动态分析的就动态分析，不能动态分析的，用配置的方式。。。。避免手工维护的方式。。。手工维护，不仅费力费时，还容易出错。


雅虎的十七条军规是原则，但是这些性能优化，在复杂的工程实践里，有可能导致性能恶化，比如顽固缓存，比如资源的冗余，资源的重复等问题。。。
那么fis是怎么解决这些问题的呢？
动态分析，不需要配置：加md5
不能动态分析的，手工配置或者统计配置：资源合并
按需加载：就近依赖。。。

拆分初始化负载：require.async;;;

架构的一个功能，拆分逻辑
